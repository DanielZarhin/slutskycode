function fr = calcFR(spktimes, varargin)

% for each unit calculates firing frequency in Hz, defined as spike count
% per binsize divided by binsize {default 1 min}. can smooth FR by a moving
% average (MA) or Gaussian kernel (GK) impleneted by multiple-pass MA.
% Default is to calculate firing rate in sliding 1-min windows of 20 s
% steps (Miyawaki et al., Sci. Rep., 2019). In practice this is done by
% setting binsize to 60 s and smoothing w/ moving average of 3 points.
% note that the output is given as spike count. to convert to Hz the output
% must be divided by the binsize.
% 
% if binsize is small the output will be a binary vector. thus calcFR can
% replace times2binary
% 
% INPUT
% required:
%   spktimes    a cell array of vectors. each vector (unit) contains the
%               timestamps of spikes. for example {spikes.times{1:4}}
% optional:
%   winCalc     time window for calculation {[1 Inf]}. specified in s.
%   binsize     size in s of bins {60}.
%   basepath    recording session path {pwd}
%   smet        method for smoothing firing rate: moving average (MA) or
%               Gaussian kernel (GK) impleneted by multiple-pass MA.
% 
% OUTPUT
% fr            struct with fields strd, norm, avg, std, bins, binsize,
%               normMethod, normWin
%
% 24 nov 18 LH. updates:
% 05 jan 18 LH  added normMethod and normWin
% 07 jan 18 LH  added disqualify units and debugging
% 11 jan 19 LH  split to various functions
% 14 jan 19 LH  added selection methods
% 24 feb 19 LH  debugging
%               replaced spikes w/ stimes as input
% 
% TO DO LIST
%               save which clusters pass the firing threshold and compare
%               with SU

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% arguments
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
validate_win = @(win) assert(isnumeric(win) && length(win) == 2,...
    'time window must be in the format [start end]');

p = inputParser;
addOptional(p, 'binsize', 60, @isscalar);
addOptional(p, 'graphics', true, @islogical);
addOptional(p, 'winCalc', [1 Inf], validate_win);
addOptional(p, 'saveFig', true, @islogical);
addOptional(p, 'basepath', pwd);
addOptional(p, 'saveVar', true, @islogical);
addOptional(p, 'metBL', 'avg', @ischar);
addOptional(p, 'winBL', [1 Inf], validate_win);
addOptional(p, 'select', {}, @iscell);
addOptional(p, 'smet', '', @ischar);

parse(p, varargin{:})
binsize = p.Results.binsize;
winCalc = p.Results.winCalc;
winBL = p.Results.winBL / binsize;
metBL = p.Results.metBL;
select = p.Results.select;
basepath = p.Results.basepath;
graphics = p.Results.graphics;
saveVar = p.Results.saveVar;
saveFig = p.Results.saveFig;
smet = p.Results.smet;

% validate windows
if winCalc(1) < 1; winCalc(1) = 1; end
if winCalc(2) == Inf
    for i = 1 : length(spktimes)
        recDur(i) = max(spktimes{i}(:, 1));
    end
    winCalc(2) = max(recDur);
end
if winBL(1) < 1; winBL(1) = 1; end
if winBL(2) == Inf; winBL(2) = recDur; end
winCalc = winCalc(1) * binsize : binsize : winCalc(2);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% calculate firing rate
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
nunits = length(spktimes);
nbins = length(winCalc);

% count number of spikes in bins
fr.strd = zeros(nunits, nbins);
for i = 1 : nunits
    for j = 1 : nbins - 1
        % correct for last bin
        if j > winCalc(end) / binsize
            binsize = mod(winCalc(end), binsize) * binsize;
        end
        fr.strd(i, j) = sum(spktimes{i} > winCalc(j) & spktimes{i} < winCalc(j + 1));
    end
end

% smooth FR
switch smet
    case 'MA'
        fr.strd = movmean(fr.strd, 3);
    case 'GK'
        gk = gausswin(10);
        for i = 1 : nunits
            fr.strd(i, :) = conv(fr.strd(i, :), gk, 'same');
        end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% normalize FR to baseline
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
bl_avg = avgFR(fr.strd, 'method', metBL, 'win', winBL);
% select units who fired above thr during baseline
if any(strcmp(select, 'thr'))
    idx_thr = bl_avg > 0.05;
else
    idx_thr = ones(nunits, 1);
end
% select units with low variability during baseline
if any(strcmp(select, 'stable'))
    bl_std = std(fr.strd(:, winBL(1) : winBL(2)), [], 2);
    idx_stable = bl_std < bl_avg;
else
    idx_stable = ones(nunits, 1);
end
idx = idx_stable & idx_thr;

% normalize
fr.norm = fr.strd(idx, :) ./ bl_avg(idx);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% graphics
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if graphics
    plotFRtime('fr', fr.norm, 'spktimes', spktimes, 'units', true, 'avg', true, 'saveFig', saveFig)  
    plotFRdistribution(bl_avg, 'saveFig', saveFig) 
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% save
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if saveVar
    fr.tstamps = winCalc;
    fr.winBL = winBL;
    fr.binsize = binsize;
    if any(strcmp(select, 'thr'))
        fr.idx_thr = idx_thr;
    end
    if any(strcmp(select, 'stable'))
        fr.idx_stable = idx_stable;
    end
    
    [~, filename] = fileparts(basepath);
    save([basepath, '\', filename, '.fr.mat'], 'fr')
end

end

% EOF