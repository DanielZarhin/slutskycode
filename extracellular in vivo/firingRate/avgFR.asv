function avgfr = avgFR(spkcount, varargin)

% for each unit calculates the mean / max FR within a window
% 
% INPUT
% required:
%   spkcount      struct (see spkCount)
% optional:
%   win         time window for calculation {[1 Inf]}. specified in min.
%   graphics    plot figure {1}.
%   saveFig     save figure {1}.
%   basepath    recording session path {pwd}
%   method      calculate 'max' or 'avg' FR within win {'avg'}.
% 
% OUTPUT
% avgfr         vector with mean / max FR across units (rows)
%
% 11 jan 19 LH.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% arguments
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
validate_win = @(win) assert(isnumeric(win) && length(win) == 2,...
    'time window must be in the format [start end]');

p = inputParser;
addOptional(p, 'graphics', 1, @islogical);
addOptional(p, 'win', [1 Inf], validate_win);
addOptional(p, 'saveFig', 1, @islogical);
addOptional(p, 'basepath', pwd);
addOptional(p, 'method', 'avg', @ischar);

parse(p,varargin{:})
graphics = p.Results.graphics;
win = p.Results.win;
saveFig = p.Results.saveFig;
basepath = p.Results.basepath;
method = p.Results.method;

nunits = size(spkcount.strd, 1);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% calculation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

avgfr = zeros(nunits, 1);
for i = 1 : nunits
    switch method
        case 'max'
            bline = max(spkcount.strd(i, win(1) : win(2)));
        case 'avg'
            bline = mean(spkcount.strd(i, win(1) : win(2)));
    end
    spkcount.norm(i, :) = spkcount.strd(i, :) / bline;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% plot
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if graphics
    
    f = figure;
    x = ([1 : nmints] / 60);
    
    % raster plot of units
    subplot(3, 1, 1)
    hold on
    for i = 1 : nunits
        y = ones(length(spikes.times{i}) ,1) * i;
        plot(spikes.times{i} / 60 / 60, y, '.k', 'markerSize', 0.1)
    end
    axis tight
    ylabel('Unit #')
    title('Raster Plot')
    
    % firing rate across time
    subplot(3, 1, 2)
    hold on
    for i = 1 : nunits
        plot(x, spkcount.strd(i, :))
    end
    axis tight
    ylabel('Frequency [Hz]')
    title('Spike Count')
    
    % normalized firing rate across time
    subplot(3, 1, 3)
    hold on
    for i = 1 : nunits
        plot(x, spkcount.norm(i, :))
    end
    p = patch([x, x(end : -1 : 1)], [errbounds(1 ,:), errbounds(2, end : -1 : 1)], [.5 .5 .5]);
    p.EdgeColor = 'none';
    plot(x, spkcount.avg, 'lineWidth', 3, 'Color', 'k')
    axis tight
    xlabel('Time [h]')
    ylabel('Norm. Frequency')
    title('Norm. Spike Count')
%     ylim([0 2])
    
    if saveFig
        filename = 'spikeCount';
        savePdf(filename, basepath, f)
    end

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% save
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if saveVar
    spkcount.win = [win(1) win(end)];
    spkcount.binsize = binsize;
    spkcount.normMethod = normMethod;
    spkcount.normWin = normWin;
    
    [~, filename] = fileparts(basepath);
    save([basepath, '\', filename, '.spkcount.mat'], 'spkcount')
end

end

% EOF